# Tanner Moore
# eGreedy
# path that balances exploration and exploitation with the
# use of random number generation based off an e value

import random # bring random num generator in
cafe_means = [7, 4, 10]
cafe_devs = [3, 10, 6]
optH = 300 * max(cafe_means)
def eGreedy(e=10):
    # creating the manipulated variables
    global cafe_means, cafe_devs, optH
    totalHap = 0
    cafe1 = 0
    cafe2 = 0
    cafe3 = 0

    # starting the 300 days
    for day in range(1,301):

        # setting happiness values
        hap1 = random.normalvariate(cafe_means[0], cafe_devs[0])
        hap2 = random.normalvariate(cafe_means[1], cafe_devs[1])
        hap3 = random.normalvariate(cafe_means[2], cafe_devs[2])

        # testing for first three days
        # cafe# values track the overall happiness of a cafeteria
        # throughout the 300 days and determines the best so far
        if day == 1:
            totalHap += hap1
            cafe1 += hap1
            days1 = 1
            avg1 = cafe1 / days1 # begin tracking average
            continue
        if day == 2:
            totalHap += hap2
            cafe2 += hap2
            days2 = 1
            avg2 = cafe2 / days2
            continue
        if day == 3:
            totalHap += hap3
            cafe3 += hap3
            days3 = 1
            avg3 = cafe3 / days3
            continue

        # creating best so far cafe
        if avg1 > avg2 and avg1 > avg3:
            best_so_far = 1
        elif avg2 > avg1 and avg2 > avg3:
            best_so_far = 2
        else:
            best_so_far = 3

        # deciding choice for the day
        r = random.random()
        if r < e/100:
            choice = random.randint(1,3)
        else:
            choice = best_so_far

        # which cafe are we visiting?
        if choice == 1:
            totalHap += hap1
            cafe1 += hap1
            days1 += 1 # how many days we visited specific cafe
            avg1 = cafe1 / days1
        elif choice == 2:
            totalHap += hap2
            cafe2 += hap2
            days2 += 1
            avg2 = cafe2 / days2
        else:
            totalHap += hap3
            cafe3 += hap3
            days3 += 1
            avg3 = cafe3 / days3

    expEGH = (((100 - e) / 100) * 300) * max(cafe_means)
    for i in range(0, 3):
        expEGH += ((e / 100 * 300) * cafe_means[i]) / 3

    expEGR = optH - expEGH
    
    return totalHap





